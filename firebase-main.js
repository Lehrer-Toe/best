// Firebase Hauptsystem - Realtime Database (Erweitert um Klassensystem)
console.log('üöÄ Firebase Main System geladen');

// Globale Daten-Cache f√ºr bessere Performance
let dataCache = {
    users: {},
    faecher: {},
    bewertungsCheckpoints: {},
    themen: {},
    gruppen: {},
    klassen: {}, // NEU: Klassen-Cache
    bewertungen: {},
    vorlagen: {},
    news: {},
    config: {},
    briefvorlage: {},
    staerkenFormulierungen: {}
};

// Realtime Listeners f√ºr automatische Updates
let activeListeners = {};

// Firebase App Initialisierung (KORRIGIERT - l√§dt keine Daten mehr)
async function initializeFirebaseApp() {
    console.log('üöÄ Initialisiere Firebase App...');
    
    try {
        // Auth System starten
        initializeAuth();
        
        // Cache initialisieren (aber keine Daten laden)
        initializeDataCache();
        
        // Erfolg
        document.getElementById('loadingScreen').style.display = 'none';
        console.log('‚úÖ Firebase App erfolgreich initialisiert');
        
    } catch (error) {
        console.error('‚ùå Fehler bei Firebase Initialisierung:', error);
        document.getElementById('loadingProgress').innerHTML = 
            '<p style="color: #e74c3c;">Fehler: ' + error.message + '</p>';
    }
}

// Cache initialisieren (OHNE Daten zu laden)
function initializeDataCache() {
    console.log('üìÇ Initialisiere Daten-Cache...');
    
    // Cache mit leeren Objekten initialisieren
    dataCache = {
        users: {},
        faecher: {},
        bewertungsCheckpoints: {},
        themen: {},
        gruppen: {},
        klassen: {}, // NEU: Klassen-Cache
        bewertungen: {},
        vorlagen: {},
        news: {},
        config: {},
        briefvorlage: {},
        staerkenFormulierungen: {}
    };
    
    console.log('‚úÖ Daten-Cache initialisiert');
}

// System-Grunddaten laden (NACH LOGIN)
async function loadSystemData() {
    console.log('üìÇ Lade System-Grunddaten nach Login...');
    
    try {
        // Config laden
        await loadConfig();
        
        // F√§cher laden
        await loadFaecher();
        
        // Bewertungs-Checkpoints laden
        await loadBewertungsCheckpoints();
        
        // Briefvorlage laden
        await loadBriefvorlage();
        
        // St√§rken-Formulierungen laden
        await loadStaerkenFormulierungen();
        
        console.log('‚úÖ System-Grunddaten geladen');
        
    } catch (error) {
        console.error('‚ùå Fehler beim Laden der Grunddaten:', error);
        // Nicht kritisch - App kann trotzdem funktionieren
    }
}

// App nach Login initialisieren (KORRIGIERT)
async function initializeAppAfterLogin() {
    console.log('üöÄ Initialisiere App nach Login...');
    
    if (!currentUser) {
        console.error('‚ùå Kein Benutzer angemeldet!');
        return;
    }
    
    console.log('üë§ Benutzer:', currentUser.name, 'Rolle:', currentUser.role);
    
    try {
        // ERST System-Daten laden
        await loadSystemData();
        
        // DANN Realtime Listeners f√ºr benutzerspezifische Daten
        setupRealtimeListeners();
        
        // Lade Inhalte der aktiven Tabs
        loadNews();
        loadThemen();
        updateFirebaseStatus();
        
        console.log('‚úÖ App-Interface geladen');
        
    } catch (error) {
        console.error('‚ùå Fehler beim Laden der App-Inhalte:', error);
        // Nicht kritisch - versuche trotzdem fortzufahren
        try {
            setupRealtimeListeners();
            loadNews();
            loadThemen();
        } catch (fallbackError) {
            console.error('‚ùå Auch Fallback fehlgeschlagen:', fallbackError);
        }
    }
}

// === DATEN LADEN ===

// Config laden
async function loadConfig() {
    try {
        const configRef = window.firebaseDB.ref(window.database, 'config/system');
        const snapshot = await window.firebaseDB.get(configRef);
        
        if (snapshot.exists()) {
            dataCache.config = snapshot.val();
            console.log('‚úÖ Config geladen');
        } else {
            // Default Config erstellen
            const defaultConfig = {
                schuljahr: '2025/26',
                appName: 'Zeig, was du kannst!',
                schule: {
                    name: 'Realschule Bad Sch√∂nborn',
                    adresse: 'Schulstra√üe 12 ‚Ä¢ 76669 Bad Sch√∂nborn',
                    telefon: '07253/12345',
                    email: 'info@rs-badschoenborn.de'
                }
            };
            
            await window.firebaseDB.set(configRef, defaultConfig);
            dataCache.config = defaultConfig;
            console.log('‚úÖ Default Config erstellt');
        }
    } catch (error) {
        console.error('‚ùå Fehler beim Laden der Config:', error);
        // Fallback Config setzen
        dataCache.config = {
            schuljahr: '2025/26',
            appName: 'Zeig, was du kannst!',
            schule: {
                name: 'Realschule Bad Sch√∂nborn',
                adresse: 'Schulstra√üe 12 ‚Ä¢ 76669 Bad Sch√∂nborn',
                telefon: '07253/12345',
                email: 'info@rs-badschoenborn.de'
            }
        };
    }
}

// F√§cher laden
async function loadFaecher() {
    try {
        const faecherRef = window.firebaseDB.ref(window.database, 'system/faecher');
        const snapshot = await window.firebaseDB.get(faecherRef);
        
        if (snapshot.exists()) {
            dataCache.faecher = snapshot.val();
            console.log('‚úÖ F√§cher geladen:', Object.keys(dataCache.faecher).length);
        } else {
            // Default F√§cher erstellen
            const defaultFaecher = {
                "D": "Deutsch",
                "M": "Mathematik",
                "E": "Englisch",
                "FR": "Franz√∂sisch",
                "T": "Technik",
                "AES": "AES",
                "G": "Geschichte",
                "GK": "Gemeinschaftskunde",
                "BIO": "Biologie",
                "PH": "Physik",
                "SP": "Sport",
                "BK": "Bildende Kunst",
                "IT": "Informatik",
                "WBS": "WBS",
                "REL": "Religion",
                "ETH": "Ethik",
                "ALL": "Allgemein"
            };
            
            await window.firebaseDB.set(faecherRef, defaultFaecher);
            dataCache.faecher = defaultFaecher;
            console.log('‚úÖ Default F√§cher erstellt');
        }
    } catch (error) {
        console.error('‚ùå Fehler beim Laden der F√§cher:', error);
        // Fallback F√§cher
        dataCache.faecher = {
            "D": "Deutsch",
            "M": "Mathematik",
            "E": "Englisch",
            "ALL": "Allgemein"
        };
    }
}

// Bewertungs-Checkpoints laden
async function loadBewertungsCheckpoints() {
    try {
        const checkpointsRef = window.firebaseDB.ref(window.database, 'system/bewertungsCheckpoints');
        const snapshot = await window.firebaseDB.get(checkpointsRef);
        
        if (snapshot.exists()) {
            dataCache.bewertungsCheckpoints = snapshot.val();
            console.log('‚úÖ Bewertungs-Checkpoints geladen');
        } else {
            // Default Checkpoints erstellen
            const defaultCheckpoints = {
                "Fachliches Arbeiten": [
                    "Du arbeitest konzentriert und ausdauernd",
                    "Du sammelst Informationen zielgerichtet",
                    "Du setzt dein Wissen sinnvoll ein",
                    "Du denkst kreativ und l√∂sungsorientiert",
                    "Du strukturierst deine Arbeit logisch und klar",
                    "Du zeigst Verantwortungsbewusstsein beim Arbeiten"
                ],
                "Zusammenarbeit": [
                    "Du arbeitest konstruktiv im Team",
                    "Du √ºbernimmst Verantwortung in der Gruppe",
                    "Du h√∂rst anderen zu und respektierst Meinungen",
                    "Du unterst√ºtzt andere aktiv",
                    "Du l√∂st Konflikte fair und eigenst√§ndig"
                ],
                "Kommunikation": [
                    "Du dr√ºckst dich klar und verst√§ndlich aus",
                    "Du h√§ltst Blickkontakt und sprichst sicher",
                    "Du kannst Feedback geben und annehmen",
                    "Du nimmst aktiv an Gespr√§chen teil",
                    "Du kannst Inhalte gut pr√§sentieren"
                ],
                "Eigenst√§ndigkeit": [
                    "Du arbeitest selbstst√§ndig und zielgerichtet",
                    "Du zeigst Eigeninitiative",
                    "Du triffst Entscheidungen und stehst dazu",
                    "Du erkennst Probleme und gehst sie an"
                ],
                "Reflexionsf√§higkeit": [
                    "Du kannst deine St√§rken und Schw√§chen benennen",
                    "Du denkst √ºber deinen Lernprozess nach",
                    "Du lernst aus Fehlern und verbesserst dich",
                    "Du beschreibst, was gut lief und was nicht"
                ],
                "Pers√∂nlichkeitsentwicklung": [
                    "Du zeigst Mut, neue Wege zu gehen",
                    "Du bleibst auch bei Schwierigkeiten dran",
                    "Du entwickelst dich im Laufe des Projekts sp√ºrbar weiter",
                    "Du nutzt R√ºckmeldungen zur Verbesserung"
                ]
            };
            
            await window.firebaseDB.set(checkpointsRef, defaultCheckpoints);
            dataCache.bewertungsCheckpoints = defaultCheckpoints;
            console.log('‚úÖ Default Bewertungs-Checkpoints erstellt');
        }
    } catch (error) {
        console.error('‚ùå Fehler beim Laden der Bewertungs-Checkpoints:', error);
        // Fallback Checkpoints
        dataCache.bewertungsCheckpoints = {
            "Fachliches Arbeiten": ["Du arbeitest konzentriert"],
            "Zusammenarbeit": ["Du arbeitest gut im Team"],
            "Kommunikation": ["Du dr√ºckst dich klar aus"]
        };
    }
}

// Briefvorlage laden
async function loadBriefvorlage() {
    try {
        const briefRef = window.firebaseDB.ref(window.database, 'system/briefvorlage');
        const snapshot = await window.firebaseDB.get(briefRef);
        
        if (snapshot.exists()) {
            dataCache.briefvorlage = snapshot.val();
            console.log('‚úÖ Briefvorlage geladen');
        } else {
            // Default Briefvorlage erstellen
            const defaultBrief = {
                anrede: "Liebe/r [NAME],\n\nim Rahmen des Projekts \"Zeig, was du kannst!\" hast du folgende St√§rken gezeigt:",
                schluss: "Wir gratulieren dir zu diesen Leistungen und freuen uns auf weitere erfolgreiche Projekte.\n\nMit freundlichen Gr√º√üen\nDein Lehrerteam"
            };
            
            await window.firebaseDB.set(briefRef, defaultBrief);
            dataCache.briefvorlage = defaultBrief;
            console.log('‚úÖ Default Briefvorlage erstellt');
        }
    } catch (error) {
        console.error('‚ùå Fehler beim Laden der Briefvorlage:', error);
        // Fallback Briefvorlage
        dataCache.briefvorlage = {
            anrede: "Liebe/r [NAME],\n\nDu hast folgende St√§rken gezeigt:",
            schluss: "Mit freundlichen Gr√º√üen\nDein Lehrerteam"
        };
    }
}

// St√§rken-Formulierungen laden
async function loadStaerkenFormulierungen() {
    try {
        const staerkenRef = window.firebaseDB.ref(window.database, 'system/staerkenFormulierungen');
        const snapshot = await window.firebaseDB.get(staerkenRef);
        
        if (snapshot.exists()) {
            dataCache.staerkenFormulierungen = snapshot.val();
            console.log('‚úÖ St√§rken-Formulierungen geladen');
        } else {
            // Default Formulierungen erstellen (basierend auf Checkpoints)
            const defaultFormulierungen = {};
            
            Object.entries(dataCache.bewertungsCheckpoints).forEach(([kategorie, checkpoints]) => {
                checkpoints.forEach((text, index) => {
                    const key = `${kategorie}_${index}`;
                    defaultFormulierungen[key] = text;
                });
            });
            
            await window.firebaseDB.set(staerkenRef, defaultFormulierungen);
            dataCache.staerkenFormulierungen = defaultFormulierungen;
            console.log('‚úÖ Default St√§rken-Formulierungen erstellt');
        }
    } catch (error) {
        console.error('‚ùå Fehler beim Laden der St√§rken-Formulierungen:', error);
        dataCache.staerkenFormulierungen = {};
    }
}

// === REALTIME LISTENERS ===

// Realtime Listeners einrichten
function setupRealtimeListeners() {
    console.log('üëÇ Richte Realtime Listeners ein...');
    
    try {
        // News Listener
        const newsRef = window.firebaseDB.ref(window.database, 'news');
        activeListeners.news = window.firebaseDB.onValue(newsRef, (snapshot) => {
            if (snapshot.exists()) {
                dataCache.news = snapshot.val();
                console.log('üîÑ News Update erhalten');
                if (typeof loadNews === 'function') {
                    loadNews();
                }
            }
        });
        
        // Themen Listener
        const themenRef = window.firebaseDB.ref(window.database, 'themen');
        activeListeners.themen = window.firebaseDB.onValue(themenRef, (snapshot) => {
            if (snapshot.exists()) {
                dataCache.themen = snapshot.val();
                console.log('üîÑ Themen Update erhalten');
                if (typeof loadThemen === 'function') {
                    loadThemen();
                }
            }
        });
        
        // Gruppen Listener
        const gruppenRef = window.firebaseDB.ref(window.database, 'gruppen');
        activeListeners.gruppen = window.firebaseDB.onValue(gruppenRef, (snapshot) => {
            if (snapshot.exists()) {
                dataCache.gruppen = snapshot.val();
                console.log('üîÑ Gruppen Update erhalten');
                if (typeof loadGruppen === 'function') {
                    loadGruppen();
                }
            }
        });
        
        // NEU: Klassen Listener (nur f√ºr Admin)
        if (currentUser && currentUser.role === 'admin') {
            const klassenRef = window.firebaseDB.ref(window.database, 'klassen');
            activeListeners.klassen = window.firebaseDB.onValue(klassenRef, (snapshot) => {
                if (snapshot.exists()) {
                    dataCache.klassen = snapshot.val();
                    console.log('üîÑ Klassen Update erhalten');
                    if (typeof loadKlassen === 'function') {
                        loadKlassen();
                    }
                    // Klassen-Selects in anderen Bereichen aktualisieren
                    if (window.klassenFunctions && window.klassenFunctions.updateKlassenSelects) {
                        window.klassenFunctions.updateKlassenSelects();
                    }
                }
            });
        }
        
        // Bewertungen Listener (nur f√ºr den aktuellen Lehrer)
        if (currentUser && currentUser.role === 'lehrer') {
            const bewertungenRef = window.firebaseDB.ref(window.database, `bewertungen/${sanitizeEmail(currentUser.email)}`);
            activeListeners.bewertungen = window.firebaseDB.onValue(bewertungenRef, (snapshot) => {
                if (snapshot.exists()) {
                    dataCache.bewertungen[currentUser.email] = snapshot.val();
                    console.log('üîÑ Bewertungen Update erhalten');
                    if (typeof loadBewertungen === 'function') {
                        loadBewertungen();
                    }
                }
            });
        }
        
        console.log('‚úÖ Realtime Listeners aktiv');
        
    } catch (error) {
        console.error('‚ùå Fehler beim Einrichten der Listeners:', error);
    }
}

// Listeners aufr√§umen (bei Logout)
function cleanupListeners() {
    console.log('üßπ R√§ume Realtime Listeners auf...');
    
    Object.entries(activeListeners).forEach(([key, unsubscribe]) => {
        if (typeof unsubscribe === 'function') {
            unsubscribe();
        }
    });
    
    activeListeners = {};
    console.log('‚úÖ Listeners aufger√§umt');
}

// === HILFSFUNKTIONEN ===

// Tab Navigation
function openTab(tabName) {
    const contents = document.querySelectorAll('.tab-content');
    const buttons = document.querySelectorAll('.tab-btn');
    
    contents.forEach(content => content.classList.remove('active'));
    buttons.forEach(button => button.classList.remove('active'));
    
    document.getElementById(tabName).classList.add('active');
    if (event && event.target) {
        event.target.classList.add('active');
    }
    
    console.log('üìë Tab gewechselt zu:', tabName);
    
    // Tab-spezifische Inhalte laden
    try {
        if (tabName === 'news') loadNews();
        if (tabName === 'themen') loadThemen();
        if (tabName === 'gruppen') loadGruppen();
        if (tabName === 'klassen') loadKlassen(); // NEU: Klassen-Tab
        if (tabName === 'lehrer') loadLehrer();
        if (tabName === 'daten') loadDatenverwaltung();
        if (tabName === 'bewerten') loadBewertungen();
        if (tabName === 'vorlagen') loadVorlagen();
        if (tabName === 'uebersicht') loadUebersicht();
        if (tabName === 'adminvorlagen') loadAdminVorlagen();
    } catch (error) {
        console.error('‚ùå Fehler beim Laden von Tab:', tabName, error);
    }
}

// F√§cher-Name aus Cache holen
function getFachNameFromGlobal(fachKuerzel) {
    return dataCache.faecher[fachKuerzel] || fachKuerzel;
}

// Alle F√§cher aus Cache holen
function getAllFaecher() {
    return dataCache.faecher;
}

// Email f√ºr Firebase Key sanitieren
function sanitizeEmail(email) {
    return email.replace(/[.$#\[\]/]/g, '_');
}

// Timestamp generieren
function getTimestamp() {
    return new Date().toISOString();
}

// Deutsche Datumsformatierung
function formatGermanDate(date = new Date()) {
    return date.toLocaleDateString('de-DE');
}

// === DATA ACCESS FUNCTIONS ===

// News aus Cache
function getNewsFromCache() {
    return Object.values(dataCache.news || {}).sort((a, b) => 
        new Date(b.datum || b.timestamp) - new Date(a.datum || a.timestamp)
    );
}

// Themen aus Cache
function getThemenFromCache() {
    return Object.values(dataCache.themen || {});
}

// Gruppen aus Cache
function getGruppenFromCache() {
    return Object.values(dataCache.gruppen || {});
}

// NEU: Klassen aus Cache
function getKlassenFromCache() {
    return Object.values(dataCache.klassen || {});
}

// Bewertungen aus Cache (f√ºr aktuellen Lehrer)
function getBewertungenFromCache() {
    if (!currentUser) return [];
    
    const lehrerBewertungen = dataCache.bewertungen[currentUser.email] || {};
    return Object.values(lehrerBewertungen);
}

// Firebase Status aktualisieren
function updateFirebaseStatus() {
    const statusElement = document.getElementById('dbStatus');
    const userElement = document.getElementById('dbUser');
    const syncElement = document.getElementById('lastSync');
    
    if (statusElement) {
        if (currentUser) {
            statusElement.innerHTML = 'üî• Verbunden';
            statusElement.style.color = '#27ae60';
        } else {
            statusElement.innerHTML = '‚ùå Nicht angemeldet';
            statusElement.style.color = '#e74c3c';
        }
    }
    
    if (userElement) {
        userElement.textContent = currentUser ? currentUser.email : '-';
    }
    
    if (syncElement) {
        syncElement.textContent = new Date().toLocaleString('de-DE');
    }
}

// === GLOBAL VERF√úGBAR MACHEN ===

// Globale Funktionen f√ºr andere Module
window.firebaseFunctions = {
    // Data Access
    getNewsFromCache,
    getThemenFromCache,
    getGruppenFromCache,
    getKlassenFromCache, // NEU: Klassen-Cache Access
    getBewertungenFromCache,
    getAllFaecher,
    getFachNameFromGlobal,
    
    // Utilities
    sanitizeEmail,
    getTimestamp,
    formatGermanDate,
    
    // Auth
    requireAuth: () => window.authFunctions.requireAuth(),
    requireAdmin: () => window.authFunctions.requireAdmin(),
    isAdmin: () => window.authFunctions.isAdmin(),
    getCurrentUserName: () => window.authFunctions.getCurrentUserName(),
    
    // Firebase References
    getDatabase: () => window.database,
    getDatabaseRef: (path) => window.firebaseDB.ref(window.database, path),
    
    // Cache Access
    dataCache
};

// Window Event Listeners
window.addEventListener('beforeunload', () => {
    cleanupListeners();
});

console.log('‚úÖ Firebase Main System bereit');
